unless = macro(
  if(arguments length !=(0),
    let(the_it, eval(arguments at(0)),
      if(arguments length >(1),
        if(the_it,
          eval(arguments at(1)),
          if(arguments length >(2),
            eval(arguments at(2))))))))
case = macro(
  if(arguments length >(0),
    let(value, eval(arguments at(0)),
        cases, arguments dropLeft(1),
        testorrec, macro(#;condition, the_code, rest,
          #;say(print(arguments at(0)))
          #;say(eval(arguments at(0)))
          if(eval(arguments at(0)) ==(value),
            eval(arguments at(1)),
            if(arguments at(2) length >(1),
              eval(unquote(''(testorrec(`(arguments at(2) at(0)), `(arguments at(2) at(1)), `(arguments at(2) dropLeft(2)))))),
              if(arguments at(2) length ==(1),
                eval(arguments at(2) at(0)))))),
      if(cases length >(1),
        eval(unquote(''(testorrec(`(cases at(0)), `(cases at(1)), `(cases dropLeft(2)))))),
        if(cases length ==(1),
          eval(cases at(0)))))))
cond = macro(
  if(arguments length >(0),
    if(arguments length >(1),
      if(eval(arguments at(0)), 
        eval(arguments at(1)),
        eval(unquote(''(cond(`*(arguments dropLeft(2))))))),
      eval(arguments at(0)))))
use = fn(file_name,
  eval(read(FileSystem readFully(file_name))))
Shell out = fn("Shell out to a subprocess with working directory pwd:, write stdin: to the standard input of the subprocess, and use printer: to alter the display printer. The fn exit_status: will be called with the exit status.", printer: '(fn(x, say("From subshell: #{x}"))), exit_status: '(fn(x, say("Exited subshell with status #{x}"))), +cmd, pwd: FileSystem cwd, stdin: false, env: Map(),
      Shell _out(printer, exit_status, pwd, stdin, env, cmd))

