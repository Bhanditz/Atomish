say(1.0 +(1.0) ×(1.1) -(22.2) +(3.0 ÷(2.0)) asText)
say(1 +(0x7) ×(-33) -(0x7f) asText)
say(111111 rem(0x7) exp(-33) asText)
say("fo\no").say("moo") . say("wh\\o?")
say("hello" +(" ") +("world"))
say("")
say("" length)
say(print_with_forms('(foo(bar: ""))))
say("qwerty" length)
say("q" length())
say("qwerty" at(3))
say("asdfghkl g e wecs" substring(2,8))
say(:foo asText)
say(:§ asText)
say(print(read("say(3)")))
eval(read("say(3)"))
say(eval(read("3 +(3)")))
say("Setting cell x = \"foo\"")
setCell("x" ,"foo" )
say("Cell x = " +( x))
x setCell("ert", 5)
say(x ert)
say(("qreefwdf" #. inline comment. +("ergergwgolihe")) substring(2, 13))
say((1 cell("+")) (1)) ؟ Sarcastic 'comment'
cell("setCell") ("a", 22)
say("a = " +(a asText))
setCell("asd", Array(12, 22, 32, 42, 52))
say(asd at(1))
say(asd length)
say(asd +(Array(3, 4)) length)
say("Empty map length: " +(Map() length asText))
say("1) a = " +(a asText))
primfn("say(\"a +(1)\") . setCell(\"a\", a +(2))") ()
say("2) a = " +(a asText))
let(a, 1, b, 2 +(2), say("3) a = " +(a asText)) . say(x +("oof")) . say(b) . ) .
say("4) a = " +(a asText))
let(a, 55, say("5> a = " +(a asText)) . let(a, 66, say("6> a = " +(a asText)) . ) . say("7> a = " +(a asText))
)
say("8> a = " +(a asText))
say(if(true, 1, 2))
say(if(false, 1, 2))
setCell("sayfo", fn("sayfoooooooo!", aaa, say(aaa asText +("fo"))))
say(cell("sayfo"))
cell("sayfo") ("sqad")
say(cell("sayfo") documentation)
sayfo(45 asText)
setCell("type_guess", fn("Guesses a few types based on cells.", it,
  if(it hasCell("÷"), say("Guess: Number"),
    if(it hasCell("substring"), say("Guess: Text"),
      if(it hasCell("activatable"),
        if(it cell("activatable"),
          say("Guess: function"),
          say("I don't know :-(")))))))
type_guess(3)
type_guess(-5.555)
type_guess("3")
type_guess(Array())
type_guess(Map())
type_guess(true)
'(a b c)
say(print('(a, b c(d))))
b = unquote('(say(foo +(4)). say(bar) . 3))
say(print_with_forms(unquote(''(macro(`(b))))))
setCell("defmacro", macro(
  say(print(arguments))
  #;arguments each(x, say(print(x)))
  if(arguments length !=(0),
    let(the_code, arguments at(1),
      setCell(eval(arguments at(0)), eval(unquote(''(macro(`(the_code)))))))
  )
))
defmacro("foobarizer",
  say(arguments at(0) +(" … foobar"))
  say(print(arguments)))
say("And now, foobarizing...\n")
#;say(print(cell("foobarizer")))
say(print_with_forms(cell("foobarizer") code))
foobarizer("Hello World!")
say("#{1330 +(7)}erpo\"]late")
say(#[#{1330 +(7)}erpo"\]late])
say(true and(false) asText)
say(false or(false not) asText)
if(nil, say("What!"), say("Nothing..."))
say(print(Array(1, 3, 5, nil, 2, nil, 55, 1) filter))
say(print(Array(1, 3, 5, 2, 55, 1) filter(<(4))))
say(print(Array(1, 3, 5, 2, 55, 1) filter(number, number ×(number - 2) <(number asText length))))
Array(Array(0, 1), Array(0, 3), Array(0, -2), Array(2, 4), Array(4, 2), Array(-1, 0)) each(x, say("qmapzs" [(x [0]) …(x [1])]))
say(print((0 … 13) toArray map(+(13))))
let(
  foow, Array(1, 2, 3, 4, 5),
  zogw, . fn(foow pop!),
  zogw
  zogw
  say(print(foow)))
say(print([1, 2, 3]))
MOO = ["m", "o", "o"]
MOO each(x, say(x))
say(["oiu", "gerg"] [1])
say(print([1]))
say(print([]))
say([2] length asText)
say([] length asText)
#;MOO = ["m"]
#;MOO each(x, say(x))
say(["oiu"] [0])
say(print({a: 1, b: 2, c: 3}))
say(print({"a" ⇒ 1, :b ⇒ 2, 3 ⇒ "c"}))
MOO = {1 ⇒ "m", "f" ⇒ "o", 3.2 ⇒ "o"}
#;MOO = Map(1 ⇒ "m", "f" ⇒ "o", 3.2 ⇒ "o")
say(print(MOO))
say(print(MOO keys))
say(print(MOO values))
MOO keys each(x, say(print(x)))
MOO values each(x, say(print(x)))
say({b: "oiu", m: "gerg"} ["m"])
say(print({w: 1}))
#;MOO = [w: "m"]
#;MOO each(x, say(x))
say({b: "oiu"} ["b"])
say({5 ⇒ "oiu"} [5])
rty = fnx("Docstring, yeah!", x, say(print(x) +("zogbar")))
say(rty documentation)
say(print(rty))
rty(3)
say(fn("foo", a, say(a). a) activatable)
say(fnx("foo", a, say(a). a) activatable)
say(fn("foo", a, say(a). a) documentation)
say(print(fnx("foo", a, say(a). a) code))
