say(print(System programArguments))
say(FileSystem exists?("test-file"))
say(FileSystem cwd ==(FileSystem parentOf("test-file")))
say(print(/foo bar baz/g))
say(print(/foo "bar"* \/baz\//asxm))
say("foo bar foobaz" replace(/(f)(o)o/ , "$2$1"))
say("foo bar foobaz" replaceAll(/(f)(o)o/ , "$2$1"))
FileSystem removeFile!("a")
say(FileSystem exists?("a") asText)
say(FileSystem withOpenFile("a", fn(x, x put(3.333). 3)))
say(FileSystem readFully("a"))
say(FileSystem exists?("a") asText)
FileSystem removeFile!("a")
say(FileSystem exists?("a") asText)
say(FileSystem withOpenFile("a", fn(x, x putBuffer(Array("foo\n∩\n", 68, 84, 22, 11, 99, 128, 254, 233, "zog", FileSystem)). x putBuffer(Array(3.333)). 3)))
say(FileSystem readFully("a"))
say(FileSystem exists?("a") asText)
say(print(Origin mimic))
setCell("doctype", fn(extension,
  say(extension)
  case(extension,
    "xml",   say("xml, yeah!"). 0,
    "xhtml", say("xhtml, okay."). 1,
             say("I don't know what #{extension} means"). -1)))
doctype("xhtml")
doctype("xml")
doctype("xaml")
say(print(Array(true, false, true) map(not)))
say(print(Array(0, 1, 2, 5, 6, 8, -3) map(+(4) asText +("tyu"))))
Array(3, 4, 5, 6, 9) each(thing, say(thing ÷(3) asText))
say(print(Array(3, 4, 5, 6, 9) map(thing, thing ÷(3) asText +("foo"))))
say(print(Array(1, 2, 3, 4, 5, 6) flatMap(x, Array(x, x -(1), x))))
XuML = Origin mimic with(
  zod: 37,
  jor: 13)
XuML foo = "bar"
say(XuML foo)
say(XuML jor asText +(XuML zod asText))
fooer = fn(a, q 88, b: 88,
  say(a asText)
  say(q asText)
  say(b asText))
fooer(1, 2, b: 3)
fooer(1, b: 3, 2)
fooer(1, b: 3)
say("z")
fooer(1, 2)
ruuer = fn(a, +:b,
  say(a asText)
  say(print(b)))
ruuer(1)
ruuer(1, 2, 3, r: 4, q: 5)
euuer = fn(a, +b,
  say(a asText)
  say(print(b)))
euuer(1)
euuer(1, 2, 3, r: 4, q: 5)
l = Array(1, 2, 3)
say(print_with_forms(
  read("unquote(''(foo(1, 2, `*(l), 7, 8)))")))
say(print(unquote(''(foo(1, 2, `*(l), 7, 8)))))
say(print(unquote(''(foo(1, 2,
  `*(l), 7, 8)))))
zog = fn(q, w, e,
  cond(
    q,       " Q ",
    w <(e),  "W!",
    e <(10), "\\e/",
             "nya."))
say(zog(true,  1,   2 ))
say(zog(false, 1,   2 ))
say(zog(false, 100, 2 ))
say(zog(false, 100, 20))
fooray = Array(1, 2, 7, 5, 4)
say(fooray [3] asText)
say(print(fooray [1 … 3]))
say(print(fooray [-1 … 2]))
say(print(fooray [0 … -2]))
say(print_with_forms('(say("foo bar foobaz" replace(/(f)(o)o/ , "$2$1"), "lol")) asArray [0] args [0]))
say(print('(("foo bar foobaz" replace(/(f)(o)o/ , zog: "$2$1"))) asArray [0]))
if("lolol" ~= /.*ol.*/,
  say("<ol>lolol</ol>"),
  say("Never were lists to be found in laughter, nor laughter made of lists."))
if("lolol" ~= /.*toil.*/,
  say(">.< o0(lolol)"),
  say("We take joy in work, yes; but toil for its own sake is not found in happiness."))
if(what: "trololo" ~= /({wololo}[^o]*)..({lo}..)./,
  say(what ["wololo"] +(what ["lo"]) +(what [0] [3])))
say(Array(1, 2, 3, 4, 56) reverse join)
say("[#{Array(1, 2, 3, 4, 56) reverse join(", ")}]")
flob = Array(3, 4, 5, 6)
flob push!(33)
say(flob pop!() +(flob pop!()))
say(print(flob))
use("feature-regression-external.atomish")


say(FOO +(1) asText)
say(BAR quux)
say(BAR qwwx(BAR quux))
Shell out("echo", "foo")
Shell out("diff", "simple-regression.atomish", "feature-regression.atomish", printer: '(fn(x, x)))
mirror = Mirror ["pre_scala_mirror"]
say(mirror idempotent?('(3)) asText)
say(eval(unquote(''(mirror idempotent?(`(''("3")))))) asText)
say(mirror idempotent?('(3 +(4))) asText)
say(mirror idempotent?('(use)) asText)
say(mirror idempotent?(''(`(use))) asText)
say(mirror dot?(''(`(use))) asText)
say(mirror dot?('(.)) asText)
say(mirror dot?('(
)) asText)
say(print('(1 2 3 asd f (g m n(qdqw))
fewf fewf(Wefwef) fsdw(asd, eqwffa: wdfwd, 435, wefwafe: wfawdfs) . "5" 
velkdjfhvl . . .) asArray))
'(1 2 3 asd f (g m n(qdqw))
fewf fewf(Wefwef) fsdw(asd, eqwffa: wdfwd, 435, wefwafe: wfawdfs) . "5" 
velkdjfhvl . . .) asArray [0] args each(f, 
  say(print(f))
  say("Idempotent: #{eval(unquote(''(mirror idempotent?(`(''(`(f))))))) asText}")
  say("Message: #{eval(unquote(''(mirror message?(`(''(`(f))))))) asText}")
  say("Call: #{eval(unquote(''(mirror call?(`(''(`(f))))))) asText}")
  say("Brackets: #{eval(unquote(''(mirror brackets?(`(''(`(f))))))) asText}")
  say("Dot: #{eval(unquote(''(mirror dot?(`(''(`(f))))))) asText}"))
let(wrgreg, 54,
  say(eval(read("wrgreg")) asText))

say(("foo" ⇒ "bar") key)
say(("foo" ⇒ "bar") value)
say(("foo" ⇒ "bar") pair? asText)
say(("foo" ⇒ "bar") #pair? asText)
say(("foo" +("bar")) #pair? asText)
say(print(%w{zog bar niff/le w:er4
  d qwd   wefwefwefiohswdfoiwdfiwdfpoi" wef /
dwf
wgwrgf wef wqz *}))
