elfident = Array(0x7f, "ELF", 2, 1, 1, 0,
                  0, 0, 0, 0, 0, 0, 0, 0)

#; placeholders for some parts of the elf header
file_type = Array(2, 0) #; Executable
processor = Array(62, 0) #; AMD64
file_version = Array(1, 0, 0, 0) #; Version 1 is current version
entry = Array(0x78, 0, 0, 0, 0, 0, 0, 0) #; 8 bytes
phoff = Array(0x40, 0, 0, 0, 0, 0, 0, 0) #; Start the program header immediately after the elf header
shoff = Array(0, 0, 0, 0, 0, 0, 0, 0) #; 8 bytes
flags = Array(0, 0, 0, 0)
header_size = Array(0x40, 0) #; This is the size of 'elfheader in bytes
phentsize = Array(0x38, 0) #; This is the number of bytes in a Elf64_Phdr struct, which can be found in the ELF specification
phnum = Array(0, 0) #; 2 bytes
shentsize = Array(0, 0) #; 2 bytes
shnum = Array(0, 0) #; 2 bytes
shstrindex = Array(0, 0) #; 2 bytes

num_to_bytes = fn("Converts a number to an array of bytes naively.", number, bytes: 2,
    0 …(bytes - 1) toArray map(num, number ÷(256 exp(num)) rem(256)))

sq = macro(
  let(contents, arguments at(0),
      eval(unquote(''(fn(eval(unquote(''(`*(contents))))))))))

add_program_header = fn(type: 1, flags: 5, offset: 0, 0)

elfheader = sq(Array(`*(elfident),
  `*(file_type),
  `*(processor),
  `*(file_version),
  `*(entry),
  `*(phoff),
  `*(shoff),
  `*(flags),
  `*(header_size),
  `*(phentsize),
  `*(phnum),
  `*(shentsize),
  `*(shnum),
  `*(shstrindex)))

pheader = sq(Array(

say(print(elfheader))

FileSystem withOpenFile("foo.out", fn(x,
  x putBuffer(elfheader)
  ))
  
